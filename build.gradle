import com.modrinth.minotaur.dependencies.ModDependency;
plugins {
    id 'java-library'
    id 'maven-publish'
    id 'idea'
    id 'net.neoforged.moddev' version '2.0.107'
    id "com.modrinth.minotaur" version "2.+"
}

version = mod_version
group = mod_group_id

repositories {
    mavenLocal()
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

neoForge {
    // Specify the version of NeoForge to use.
    version = project.neo_version

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }

    // This line is optional. Access Transformers are automatically detected
    // accessTransformers.add('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            client()

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            data()

            // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
            // gameDirectory = project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        // applies to all the run configs above
        configureEach {
            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            systemProperty 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        // define mod <-> source bindings
        // these are used to tell the game which sources are for which mod
        // mostly optional in a single mod project
        // but multi mod projects should define one per mod
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }


dependencies {
    // Example mod dependency with JEI
    // The JEI API is declared for compile time use, while the full JEI artifact is used at runtime
    // compileOnly "mezz.jei:jei-${mc_version}-common-api:${jei_version}"
    // compileOnly "mezz.jei:jei-${mc_version}-forge-api:${jei_version}"
    // runtimeOnly "mezz.jei:jei-${mc_version}-forge:${jei_version}"

    // Example mod dependency using a mod jar from ./libs with a flat dir repository
    // This maps to ./libs/coolmod-${mc_version}-${coolmod_version}.jar
    // The group id is ignored when searching -- in this case, it is "blank"
    // implementation "blank:coolmod-${mc_version}:${coolmod_version}"

    // Example mod dependency using a file as dependency
    // implementation files("libs/coolmod-${mc_version}-${coolmod_version}.jar")

    // Example project dependency using a sister or child project:
    // implementation project(":myproject")

    // For more info:
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
    implementation "curse.maven:touhou-little-maid-355044:6911706"
    implementation "curse.maven:jade-324717:6853386"
    runtimeOnly "curse.maven:patchouli-306770:6842247"
    implementation "curse.maven:cloth-config-348521:5729127"
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [minecraft_version      : minecraft_version,
                             minecraft_version_range: minecraft_version_range,
                             neo_version            : neo_version,
                             neo_version_range      : neo_version_range,
                             loader_version_range   : loader_version_range,
                             mod_id                 : mod_id,
                             mod_name               : mod_name,
                             mod_license            : mod_license,
                             mod_version            : mod_version,
                             mod_authors            : mod_authors,
                             mod_description        : mod_description,
    version_description : version_description]
    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}

// Include the output of "generateModMetadata" as an input directory for the build
// this works with both building through Gradle and the IDE.
sourceSets.main.resources.srcDir generateModMetadata
// To avoid having to run "generateModMetadata" manually, make it run on every project reload
neoForge.ideSyncTask generateModMetadata

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

modrinth {
    def envToken = System.getenv("MODRINTH_TOKEN")
    if (envToken != null && !envToken.isEmpty()) {
        token = envToken
    } else {
        // 如果没有 token，跳过 Modrinth 配置
        throw new GradleException("错误: MODRINTH_TOKEN 环境变量未设置")
    }
    // 从环境变量获取 token，如果没有设置就报错
    token = System.getenv("MODRINTH_TOKEN");

    projectId = 'GTO2209U'           // 你的 Modrinth 项目 ID
    versionNumber = mod_version          // 模组版本号
    versionName = mod_name + " " + mod_version // 版本标题
    uploadFile = jar             // 上传重映射的 jar 文件
    gameVersions = [minecraft_version] // 支持的游戏版本
    loaders = ['neoforge']              // 加载器类型
    dependencies = [
            new ModDependency("9s6osm5g", "required"),
            new ModDependency("R0bDWFAW", "required")
    ]
    changelog = version_description

    versionType = "alpha"  // 版本类型
}

tasks.named('modrinth') {
    // TM构建脚本全是AI写的
    dependsOn 'build'  // 确保先构建再上传
    dependsOn 'runGameTestServer' // 你猜为什么有这行代码
    doFirst {
        // 命令行确认提示
        println "=============================================="
        println "⚠️  即将上传到 Modrinth!"
        println "📦 项目: $mod_name v$mod_version"
        println "🎮 版本: $minecraft_version"
        println "🔧 加载器: neoforge"
        println "=============================================="

        // 等待用户确认
        def console = System.console()
        if (console) {
            def response = console.readLine("是否继续上传？(y/N): ")
            if (!response.equalsIgnoreCase("y")) {
                throw new GradleException("上传已取消")
            }
        } else {
            // 如果没有控制台（如在IDE中），使用缓冲读取器
            println "无法显示交互提示，5秒后自动继续..."
            println "按 Ctrl+C 取消上传"
            Thread.sleep(5000)
        }

        println "开始上传..."
    }
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
